INPUT UV->sRGB_PremultipliedA 'Image';
INPUT Point2D 'Center';

INPUT int 'Sample Count';
INPUT float 'Blur';
INPUT float 'Falloff';

sRGB_PremultipliedA main(UV uv)
{
    float inverse_sample_count = 1.0 / 'Sample Count';

    vec2 view_space_uv = to_view_space(uv) - 'Center';

    vec2 direction = normalize(view_space_uv);

    vec2 velocity = direction * 'Blur' * pow(length(view_space_uv), 'Falloff');

    mat3x2 increments = mat3x2(
        velocity * 1.0 * inverse_sample_count,
        velocity * 2.0 * inverse_sample_count,
        velocity * 4.0 * inverse_sample_count
    );

    vec4   accumulator = vec4(0);
    mat3x2 offsets     = mat3x2(0);

    for (int i = 0; i < 'Sample Count'; i++)
    {
        vec4 color0 = 'Image'(uv + offsets[0]);
        vec4 color1 = 'Image'(uv + offsets[1]);
        vec4 color2 = 'Image'(uv + offsets[2]);
        accumulator.r += color0.r;
        accumulator.g += color1.g;
        accumulator.b += color2.b;
        accumulator.a += (color0.a
                          + color1.a
                          + color2.a)
                         / 3.;

        offsets -= increments;
    }

    return accumulator * inverse_sample_count;
}